# Simple workflow for deploying static content to GitHub Pages
name: Build, Test, npm Publish, and Deploy

on:
  push:
    paths-ignore:
      - "docs/**"
      - "integration/**"
      - "*.md"
  pull_request:
    paths-ignore:
      - "docs/**"
      - "integration/**"
      - "*.md"

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  # Test
  test:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: pnpm
          registry-url: "https://registry.npmjs.org"
      - name: Install dependencies
        run: pnpm install
      - name: Run tests
        run: pnpm test

  npm-publish:
    runs-on: ubuntu-22.04
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/publish'
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - uses: pnpm/action-setup@v4
        with:
          version: 9
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: pnpm
          registry-url: "https://registry.npmjs.org"
      - run: pnpm install
      - name: Bump Version
        id: bump
        run: ./scripts/bump-version.js
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Build
        run: pnpm build
      - name: Publish to npm
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
      - name: Create git tag
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git tag "v${{ steps.bump.outputs.version }}"
          git push origin "v${{ steps.bump.outputs.version }}"
      - name: Add version to job summary
        run: |
          echo "# Published Version" >> $GITHUB_STEP_SUMMARY
          echo "| Package | Version | Tag |" >> $GITHUB_STEP_SUMMARY
          echo "| --- | --- | --- |" >> $GITHUB_STEP_SUMMARY
          echo "| @zenuml/core | v${{ steps.bump.outputs.version }} | [v${{ steps.bump.outputs.version }}](https://github.com/mermaid-js/zenuml-core/releases/tag/v${{ steps.bump.outputs.version }}) |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "[View on npm](https://www.npmjs.com/package/@zenuml/core/v/${{ steps.bump.outputs.version }})" >> $GITHUB_STEP_SUMMARY

  # Deploy to Cloudflare Workers
  deploy-to-cloudflare:
    runs-on: ubuntu-22.04
    needs: test
    permissions:
      contents: read
      deployments: write
    outputs:
      deployment-url: ${{ steps.deploy-production.outputs.deployment-url || steps.deploy-staging.outputs.deployment-url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - uses: pnpm/action-setup@v4
        with:
          version: 9
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: pnpm
          registry-url: "https://registry.npmjs.org"
      - name: Install dependencies
        run: pnpm install
        
      - name: Deploy to Cloudflare Workers (Production)
        if: github.ref == 'refs/heads/main'
        id: deploy-production
        env:
          CLOUDFLARE_API_TOKEN: ${{ vars.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ vars.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          # Deploy and capture the output
          DEPLOY_OUTPUT=$(pnpm worker:deploy 2>&1)
          echo "$DEPLOY_OUTPUT"
          
          # Extract the deployment URL from wrangler output
          DEPLOYMENT_URL=$(echo "$DEPLOY_OUTPUT" | grep -oE 'https://[^[:space:]]+\.workers\.dev' | head -1)
          echo "Deployment URL: $DEPLOYMENT_URL"
          echo "deployment-url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          
          # Add annotation to the step
          echo "::notice title=Production Deployment::🚀 Deployed to $DEPLOYMENT_URL"

      - name: Deploy to Cloudflare Workers (Staging)
        if: github.ref != 'refs/heads/main'
        id: deploy-staging
        env:
          CLOUDFLARE_API_TOKEN: ${{ vars.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ vars.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          # Deploy and capture the output
          DEPLOY_OUTPUT=$(pnpm worker:deploy:staging 2>&1)
          echo "$DEPLOY_OUTPUT"
          
          # Extract the deployment URL from wrangler output
          DEPLOYMENT_URL=$(echo "$DEPLOY_OUTPUT" | grep -oE 'https://[^[:space:]]+\.workers\.dev' | head -1)
          echo "Deployment URL: $DEPLOYMENT_URL"
          echo "deployment-url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          
          # Add annotation to the step
          echo "::notice title=Staging Deployment::🧪 Deployed to $DEPLOYMENT_URL"

      - name: Add Cloudflare deployment info to job summary
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "# 🚀 Cloudflare Workers Production Deployment" >> $GITHUB_STEP_SUMMARY
            echo "Deployed to: **Production**" >> $GITHUB_STEP_SUMMARY
            echo "Environment: **production**" >> $GITHUB_STEP_SUMMARY
            echo "URL: ${{ steps.deploy-production.outputs.deployment-url }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "# 🧪 Cloudflare Workers Staging Deployment" >> $GITHUB_STEP_SUMMARY
            echo "Deployed to: **Staging**" >> $GITHUB_STEP_SUMMARY
            echo "Environment: **staging**" >> $GITHUB_STEP_SUMMARY
            echo "URL: ${{ steps.deploy-staging.outputs.deployment-url }}" >> $GITHUB_STEP_SUMMARY
          fi
          echo "Branch: **${{ github.ref_name }}**" >> $GITHUB_STEP_SUMMARY
          echo "Commit: **${{ github.sha }}**" >> $GITHUB_STEP_SUMMARY

  # Display deployment URL in workflow graph
  deployment-info:
    name: "🌐 Deployment URL"
    runs-on: ubuntu-22.04
    needs: deploy-to-cloudflare
    if: always() && needs.deploy-to-cloudflare.result == 'success'
    steps:
      - name: "Show Deployment URL"
        run: |
          echo "🎆 Deployment successful!"
          echo "URL: ${{ needs.deploy-to-cloudflare.outputs.deployment-url }}"
          echo ""
          echo "Visit: ${{ needs.deploy-to-cloudflare.outputs.deployment-url }}"
