// Generated from java-escape by ANTLR 4.11.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,71,601,6,-1,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,
2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,
11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,
2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,
7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,
40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,
2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,
55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,
7,62,2,63,7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,
69,2,70,7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,1,0,1,0,1,
0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,4,2,167,8,2,11,2,12,2,168,1,2,1,2,1,2,
1,2,1,2,1,2,1,2,1,2,3,2,179,8,2,3,2,181,8,2,1,3,1,3,1,4,1,4,1,4,1,4,1,4,
1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,
1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,
1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,
1,13,1,13,1,14,1,14,4,14,246,8,14,11,14,12,14,247,1,15,1,15,1,15,1,16,1,
16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,21,
1,22,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,
28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,
1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,39,1,
39,1,39,1,39,1,39,1,39,1,39,3,39,318,8,39,1,40,1,40,1,40,1,41,1,41,1,41,
1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,
42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,3,42,
354,8,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,45,1,45,
1,45,1,45,1,46,1,46,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,48,1,48,1,
48,1,48,1,48,1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,
1,49,1,49,1,49,1,49,3,49,402,8,49,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,52,
1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,54,1,54,1,
54,1,54,1,54,1,55,1,55,1,55,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,
1,56,1,56,1,56,1,56,1,56,1,56,1,56,3,56,448,8,56,1,57,1,57,1,57,1,57,1,57,
1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,
57,1,57,1,57,1,57,1,57,1,57,1,57,3,57,476,8,57,1,58,1,58,5,58,480,8,58,10,
58,12,58,483,9,58,1,59,1,59,1,60,1,60,5,60,489,8,60,10,60,12,60,492,9,60,
1,61,4,61,495,8,61,11,61,12,61,496,1,62,1,62,1,63,4,63,502,8,63,11,63,12,
63,503,1,64,4,64,507,8,64,11,64,12,64,508,1,64,1,64,5,64,513,8,64,10,64,
12,64,516,9,64,1,64,1,64,4,64,520,8,64,11,64,12,64,521,3,64,524,8,64,1,65,
1,65,1,65,3,65,529,8,65,1,66,1,66,3,66,533,8,66,1,66,1,66,1,67,1,67,1,67,
1,67,5,67,541,8,67,10,67,12,67,544,9,67,1,67,3,67,547,8,67,1,68,1,68,1,68,
1,68,1,69,1,69,1,69,1,69,5,69,557,8,69,10,69,12,69,560,9,69,1,69,1,69,1,
69,1,69,1,70,1,70,1,71,1,71,5,71,570,8,71,10,71,12,71,573,9,71,1,71,1,71,
1,71,1,71,5,71,579,8,71,10,71,12,71,582,9,71,1,72,4,72,585,8,72,11,72,12,
72,586,1,73,1,73,1,73,1,73,1,74,4,74,594,8,74,11,74,12,74,595,1,75,1,75,
1,75,1,75,1,558,0,76,3,1,5,2,7,0,9,0,11,3,13,4,15,5,17,6,19,7,21,8,23,9,
25,10,27,11,29,0,31,12,33,13,35,14,37,15,39,16,41,17,43,18,45,19,47,20,49,
21,51,22,53,23,55,24,57,25,59,26,61,27,63,28,65,29,67,30,69,31,71,32,73,
33,75,34,77,35,79,36,81,37,83,38,85,39,87,40,89,41,91,42,93,43,95,44,97,
45,99,46,101,47,103,48,105,49,107,50,109,51,111,52,113,53,115,54,117,55,
119,56,121,57,123,58,125,0,127,0,129,59,131,60,133,61,135,62,137,63,139,
64,141,65,143,66,145,67,147,68,149,69,151,70,153,71,3,0,1,2,9,2,0,9,9,32,
32,3,0,48,57,65,90,97,122,3,0,48,57,65,70,97,102,4,0,48,57,65,90,95,95,97,
122,3,0,65,90,95,95,97,122,2,0,65,90,97,122,1,0,48,57,3,0,10,10,13,13,34,
34,2,0,10,10,13,13,625,0,3,1,0,0,0,0,5,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,
0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,
0,0,0,0,27,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,
39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,
0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,
1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,
0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,
0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,
95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,
0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,
0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,129,1,0,0,
0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,0,137,1,0,0,0,0,139,1,0,0,0,
0,141,1,0,0,0,0,143,1,0,0,0,0,145,1,0,0,0,1,147,1,0,0,0,1,149,1,0,0,0,2,
151,1,0,0,0,2,153,1,0,0,0,3,155,1,0,0,0,5,159,1,0,0,0,7,180,1,0,0,0,9,182,
1,0,0,0,11,184,1,0,0,0,13,192,1,0,0,0,15,203,1,0,0,0,17,212,1,0,0,0,19,220,
1,0,0,0,21,228,1,0,0,0,23,232,1,0,0,0,25,235,1,0,0,0,27,238,1,0,0,0,29,241,
1,0,0,0,31,243,1,0,0,0,33,249,1,0,0,0,35,252,1,0,0,0,37,255,1,0,0,0,39,258,
1,0,0,0,41,261,1,0,0,0,43,263,1,0,0,0,45,265,1,0,0,0,47,268,1,0,0,0,49,271,
1,0,0,0,51,273,1,0,0,0,53,275,1,0,0,0,55,277,1,0,0,0,57,279,1,0,0,0,59,281,
1,0,0,0,61,283,1,0,0,0,63,285,1,0,0,0,65,287,1,0,0,0,67,289,1,0,0,0,69,291,
1,0,0,0,71,293,1,0,0,0,73,295,1,0,0,0,75,297,1,0,0,0,77,299,1,0,0,0,79,304,
1,0,0,0,81,317,1,0,0,0,83,319,1,0,0,0,85,322,1,0,0,0,87,353,1,0,0,0,89,355,
1,0,0,0,91,362,1,0,0,0,93,366,1,0,0,0,95,370,1,0,0,0,97,376,1,0,0,0,99,380,
1,0,0,0,101,401,1,0,0,0,103,403,1,0,0,0,105,407,1,0,0,0,107,410,1,0,0,0,
109,414,1,0,0,0,111,420,1,0,0,0,113,428,1,0,0,0,115,447,1,0,0,0,117,475,
1,0,0,0,119,477,1,0,0,0,121,484,1,0,0,0,123,486,1,0,0,0,125,494,1,0,0,0,
127,498,1,0,0,0,129,501,1,0,0,0,131,523,1,0,0,0,133,525,1,0,0,0,135,532,
1,0,0,0,137,536,1,0,0,0,139,548,1,0,0,0,141,552,1,0,0,0,143,565,1,0,0,0,
145,567,1,0,0,0,147,584,1,0,0,0,149,588,1,0,0,0,151,593,1,0,0,0,153,597,
1,0,0,0,155,156,7,0,0,0,156,157,1,0,0,0,157,158,6,0,0,0,158,4,1,0,0,0,159,
160,5,92,0,0,160,161,3,7,2,0,161,162,5,92,0,0,162,163,1,0,0,0,163,164,6,
1,1,0,164,6,1,0,0,0,165,167,7,1,0,0,166,165,1,0,0,0,167,168,1,0,0,0,168,
166,1,0,0,0,168,169,1,0,0,0,169,181,1,0,0,0,170,171,5,35,0,0,171,172,3,9,
3,0,172,173,3,9,3,0,173,178,3,9,3,0,174,175,3,9,3,0,175,176,3,9,3,0,176,
177,3,9,3,0,177,179,1,0,0,0,178,174,1,0,0,0,178,179,1,0,0,0,179,181,1,0,
0,0,180,166,1,0,0,0,180,170,1,0,0,0,181,8,1,0,0,0,182,183,7,2,0,0,183,10,
1,0,0,0,184,185,5,99,0,0,185,186,5,111,0,0,186,187,5,110,0,0,187,188,5,115,
0,0,188,189,5,116,0,0,189,190,1,0,0,0,190,191,6,4,2,0,191,12,1,0,0,0,192,
193,5,114,0,0,193,194,5,101,0,0,194,195,5,97,0,0,195,196,5,100,0,0,196,197,
5,111,0,0,197,198,5,110,0,0,198,199,5,108,0,0,199,200,5,121,0,0,200,201,
1,0,0,0,201,202,6,5,2,0,202,14,1,0,0,0,203,204,5,115,0,0,204,205,5,116,0,
0,205,206,5,97,0,0,206,207,5,116,0,0,207,208,5,105,0,0,208,209,5,99,0,0,
209,210,1,0,0,0,210,211,6,6,2,0,211,16,1,0,0,0,212,213,5,97,0,0,213,214,
5,119,0,0,214,215,5,97,0,0,215,216,5,105,0,0,216,217,5,116,0,0,217,218,1,
0,0,0,218,219,6,7,2,0,219,18,1,0,0,0,220,221,5,116,0,0,221,222,5,105,0,0,
222,223,5,116,0,0,223,224,5,108,0,0,224,225,5,101,0,0,225,226,1,0,0,0,226,
227,6,8,3,0,227,20,1,0,0,0,228,229,5,58,0,0,229,230,1,0,0,0,230,231,6,9,
4,0,231,22,1,0,0,0,232,233,5,60,0,0,233,234,5,60,0,0,234,24,1,0,0,0,235,
236,5,62,0,0,236,237,5,62,0,0,237,26,1,0,0,0,238,239,5,45,0,0,239,240,5,
62,0,0,240,28,1,0,0,0,241,242,7,2,0,0,242,30,1,0,0,0,243,245,5,35,0,0,244,
246,3,29,13,0,245,244,1,0,0,0,246,247,1,0,0,0,247,245,1,0,0,0,247,248,1,
0,0,0,248,32,1,0,0,0,249,250,5,124,0,0,250,251,5,124,0,0,251,34,1,0,0,0,
252,253,5,38,0,0,253,254,5,38,0,0,254,36,1,0,0,0,255,256,5,61,0,0,256,257,
5,61,0,0,257,38,1,0,0,0,258,259,5,33,0,0,259,260,5,61,0,0,260,40,1,0,0,0,
261,262,5,62,0,0,262,42,1,0,0,0,263,264,5,60,0,0,264,44,1,0,0,0,265,266,
5,62,0,0,266,267,5,61,0,0,267,46,1,0,0,0,268,269,5,60,0,0,269,270,5,61,0,
0,270,48,1,0,0,0,271,272,5,43,0,0,272,50,1,0,0,0,273,274,5,45,0,0,274,52,
1,0,0,0,275,276,5,42,0,0,276,54,1,0,0,0,277,278,5,47,0,0,278,56,1,0,0,0,
279,280,5,37,0,0,280,58,1,0,0,0,281,282,5,94,0,0,282,60,1,0,0,0,283,284,
5,33,0,0,284,62,1,0,0,0,285,286,5,59,0,0,286,64,1,0,0,0,287,288,5,44,0,0,
288,66,1,0,0,0,289,290,5,61,0,0,290,68,1,0,0,0,291,292,5,40,0,0,292,70,1,
0,0,0,293,294,5,41,0,0,294,72,1,0,0,0,295,296,5,123,0,0,296,74,1,0,0,0,297,
298,5,125,0,0,298,76,1,0,0,0,299,300,5,116,0,0,300,301,5,114,0,0,301,302,
5,117,0,0,302,303,5,101,0,0,303,78,1,0,0,0,304,305,5,102,0,0,305,306,5,97,
0,0,306,307,5,108,0,0,307,308,5,115,0,0,308,309,5,101,0,0,309,80,1,0,0,0,
310,311,5,110,0,0,311,312,5,105,0,0,312,318,5,108,0,0,313,314,5,110,0,0,
314,315,5,117,0,0,315,316,5,108,0,0,316,318,5,108,0,0,317,310,1,0,0,0,317,
313,1,0,0,0,318,82,1,0,0,0,319,320,5,105,0,0,320,321,5,102,0,0,321,84,1,
0,0,0,322,323,5,101,0,0,323,324,5,108,0,0,324,325,5,115,0,0,325,326,5,101,
0,0,326,86,1,0,0,0,327,328,5,119,0,0,328,329,5,104,0,0,329,330,5,105,0,0,
330,331,5,108,0,0,331,354,5,101,0,0,332,333,5,102,0,0,333,334,5,111,0,0,
334,354,5,114,0,0,335,336,5,102,0,0,336,337,5,111,0,0,337,338,5,114,0,0,
338,339,5,101,0,0,339,340,5,97,0,0,340,341,5,99,0,0,341,354,5,104,0,0,342,
343,5,102,0,0,343,344,5,111,0,0,344,345,5,114,0,0,345,346,5,69,0,0,346,347,
5,97,0,0,347,348,5,99,0,0,348,354,5,104,0,0,349,350,5,108,0,0,350,351,5,
111,0,0,351,352,5,111,0,0,352,354,5,112,0,0,353,327,1,0,0,0,353,332,1,0,
0,0,353,335,1,0,0,0,353,342,1,0,0,0,353,349,1,0,0,0,354,88,1,0,0,0,355,356,
5,114,0,0,356,357,5,101,0,0,357,358,5,116,0,0,358,359,5,117,0,0,359,360,
5,114,0,0,360,361,5,110,0,0,361,90,1,0,0,0,362,363,5,110,0,0,363,364,5,101,
0,0,364,365,5,119,0,0,365,92,1,0,0,0,366,367,5,112,0,0,367,368,5,97,0,0,
368,369,5,114,0,0,369,94,1,0,0,0,370,371,5,103,0,0,371,372,5,114,0,0,372,
373,5,111,0,0,373,374,5,117,0,0,374,375,5,112,0,0,375,96,1,0,0,0,376,377,
5,111,0,0,377,378,5,112,0,0,378,379,5,116,0,0,379,98,1,0,0,0,380,381,5,99,
0,0,381,382,5,114,0,0,382,383,5,105,0,0,383,384,5,116,0,0,384,385,5,105,
0,0,385,386,5,99,0,0,386,387,5,97,0,0,387,388,5,108,0,0,388,100,1,0,0,0,
389,390,5,115,0,0,390,391,5,101,0,0,391,392,5,99,0,0,392,393,5,116,0,0,393,
394,5,105,0,0,394,395,5,111,0,0,395,402,5,110,0,0,396,397,5,102,0,0,397,
398,5,114,0,0,398,399,5,97,0,0,399,400,5,109,0,0,400,402,5,101,0,0,401,389,
1,0,0,0,401,396,1,0,0,0,402,102,1,0,0,0,403,404,5,114,0,0,404,405,5,101,
0,0,405,406,5,102,0,0,406,104,1,0,0,0,407,408,5,97,0,0,408,409,5,115,0,0,
409,106,1,0,0,0,410,411,5,116,0,0,411,412,5,114,0,0,412,413,5,121,0,0,413,
108,1,0,0,0,414,415,5,99,0,0,415,416,5,97,0,0,416,417,5,116,0,0,417,418,
5,99,0,0,418,419,5,104,0,0,419,110,1,0,0,0,420,421,5,102,0,0,421,422,5,105,
0,0,422,423,5,110,0,0,423,424,5,97,0,0,424,425,5,108,0,0,425,426,5,108,0,
0,426,427,5,121,0,0,427,112,1,0,0,0,428,429,5,105,0,0,429,430,5,110,0,0,
430,114,1,0,0,0,431,432,5,64,0,0,432,433,5,83,0,0,433,434,5,116,0,0,434,
435,5,97,0,0,435,436,5,114,0,0,436,437,5,116,0,0,437,438,5,101,0,0,438,448,
5,114,0,0,439,440,5,64,0,0,440,441,5,115,0,0,441,442,5,116,0,0,442,443,5,
97,0,0,443,444,5,114,0,0,444,445,5,116,0,0,445,446,5,101,0,0,446,448,5,114,
0,0,447,431,1,0,0,0,447,439,1,0,0,0,448,116,1,0,0,0,449,450,5,64,0,0,450,
451,5,82,0,0,451,452,5,101,0,0,452,453,5,116,0,0,453,454,5,117,0,0,454,455,
5,114,0,0,455,476,5,110,0,0,456,457,5,64,0,0,457,458,5,114,0,0,458,459,5,
101,0,0,459,460,5,116,0,0,460,461,5,117,0,0,461,462,5,114,0,0,462,476,5,
110,0,0,463,464,5,64,0,0,464,465,5,82,0,0,465,466,5,101,0,0,466,467,5,112,
0,0,467,468,5,108,0,0,468,476,5,121,0,0,469,470,5,64,0,0,470,471,5,114,0,
0,471,472,5,101,0,0,472,473,5,112,0,0,473,474,5,108,0,0,474,476,5,121,0,
0,475,449,1,0,0,0,475,456,1,0,0,0,475,463,1,0,0,0,475,469,1,0,0,0,476,118,
1,0,0,0,477,481,5,64,0,0,478,480,7,3,0,0,479,478,1,0,0,0,480,483,1,0,0,0,
481,479,1,0,0,0,481,482,1,0,0,0,482,120,1,0,0,0,483,481,1,0,0,0,484,485,
5,46,0,0,485,122,1,0,0,0,486,490,7,4,0,0,487,489,7,3,0,0,488,487,1,0,0,0,
489,492,1,0,0,0,490,488,1,0,0,0,490,491,1,0,0,0,491,124,1,0,0,0,492,490,
1,0,0,0,493,495,7,5,0,0,494,493,1,0,0,0,495,496,1,0,0,0,496,494,1,0,0,0,
496,497,1,0,0,0,497,126,1,0,0,0,498,499,7,6,0,0,499,128,1,0,0,0,500,502,
3,127,62,0,501,500,1,0,0,0,502,503,1,0,0,0,503,501,1,0,0,0,503,504,1,0,0,
0,504,130,1,0,0,0,505,507,3,127,62,0,506,505,1,0,0,0,507,508,1,0,0,0,508,
506,1,0,0,0,508,509,1,0,0,0,509,510,1,0,0,0,510,514,5,46,0,0,511,513,3,127,
62,0,512,511,1,0,0,0,513,516,1,0,0,0,514,512,1,0,0,0,514,515,1,0,0,0,515,
524,1,0,0,0,516,514,1,0,0,0,517,519,5,46,0,0,518,520,3,127,62,0,519,518,
1,0,0,0,520,521,1,0,0,0,521,519,1,0,0,0,521,522,1,0,0,0,522,524,1,0,0,0,
523,506,1,0,0,0,523,517,1,0,0,0,524,132,1,0,0,0,525,528,5,36,0,0,526,529,
3,129,63,0,527,529,3,131,64,0,528,526,1,0,0,0,528,527,1,0,0,0,529,134,1,
0,0,0,530,533,3,129,63,0,531,533,3,131,64,0,532,530,1,0,0,0,532,531,1,0,
0,0,533,534,1,0,0,0,534,535,3,125,61,0,535,136,1,0,0,0,536,542,5,34,0,0,
537,541,8,7,0,0,538,539,5,34,0,0,539,541,5,34,0,0,540,537,1,0,0,0,540,538,
1,0,0,0,541,544,1,0,0,0,542,540,1,0,0,0,542,543,1,0,0,0,543,546,1,0,0,0,
544,542,1,0,0,0,545,547,7,7,0,0,546,545,1,0,0,0,546,547,1,0,0,0,547,138,
1,0,0,0,548,549,7,8,0,0,549,550,1,0,0,0,550,551,6,68,0,0,551,140,1,0,0,0,
552,553,5,47,0,0,553,554,5,47,0,0,554,558,1,0,0,0,555,557,9,0,0,0,556,555,
1,0,0,0,557,560,1,0,0,0,558,559,1,0,0,0,558,556,1,0,0,0,559,561,1,0,0,0,
560,558,1,0,0,0,561,562,5,10,0,0,562,563,1,0,0,0,563,564,6,69,5,0,564,142,
1,0,0,0,565,566,9,0,0,0,566,144,1,0,0,0,567,571,4,71,0,0,568,570,3,3,0,0,
569,568,1,0,0,0,570,573,1,0,0,0,571,569,1,0,0,0,571,572,1,0,0,0,572,574,
1,0,0,0,573,571,1,0,0,0,574,575,5,61,0,0,575,576,5,61,0,0,576,580,1,0,0,
0,577,579,8,8,0,0,578,577,1,0,0,0,579,582,1,0,0,0,580,578,1,0,0,0,580,581,
1,0,0,0,581,146,1,0,0,0,582,580,1,0,0,0,583,585,8,8,0,0,584,583,1,0,0,0,
585,586,1,0,0,0,586,584,1,0,0,0,586,587,1,0,0,0,587,148,1,0,0,0,588,589,
7,8,0,0,589,590,1,0,0,0,590,591,6,73,6,0,591,150,1,0,0,0,592,594,8,8,0,0,
593,592,1,0,0,0,594,595,1,0,0,0,595,593,1,0,0,0,595,596,1,0,0,0,596,152,
1,0,0,0,597,598,7,8,0,0,598,599,1,0,0,0,599,600,6,75,6,0,600,154,1,0,0,0,
30,0,1,2,168,178,180,247,317,353,401,447,475,481,490,496,503,508,514,521,
523,528,532,540,542,546,558,571,580,586,595,7,0,1,0,0,4,0,0,3,0,5,2,0,5,
1,0,0,2,0,4,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class sequenceLexer extends antlr4.Lexer {

    static grammarFileName = "sequenceLexer.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN", "COMMENT_CHANNEL", 
                                                               "MODIFIER_CHANNEL", 
                                                               "INLINE_DECORATOR_CHANNEL" ];
	static modeNames = [ "DEFAULT_MODE", "EVENT", "TITLE_MODE" ];
	static literalNames = [ null, null, null, "'const'", "'readonly'", "'static'", 
                         "'await'", "'title'", "':'", "'<<'", "'>>'", "'->'", 
                         null, "'||'", "'&&'", "'=='", "'!='", "'>'", "'<'", 
                         "'>='", "'<='", "'+'", "'-'", "'*'", "'/'", "'%'", 
                         "'^'", "'!'", "';'", "','", "'='", "'('", "')'", 
                         "'{'", "'}'", "'true'", "'false'", null, "'if'", 
                         "'else'", null, "'return'", "'new'", "'par'", "'group'", 
                         "'opt'", "'critical'", null, "'ref'", "'as'", "'try'", 
                         "'catch'", "'finally'", "'in'", null, null, null, 
                         "'.'" ];
	static symbolicNames = [ null, "WS", "COLOR_OR_EMOJI_MARKER", "CONSTANT", 
                          "READONLY", "STATIC", "AWAIT", "TITLE", "COL", 
                          "SOPEN", "SCLOSE", "ARROW", "COLOR", "OR", "AND", 
                          "EQ", "NEQ", "GT", "LT", "GTEQ", "LTEQ", "PLUS", 
                          "MINUS", "MULT", "DIV", "MOD", "POW", "NOT", "SCOL", 
                          "COMMA", "ASSIGN", "OPAR", "CPAR", "OBRACE", "CBRACE", 
                          "TRUE", "FALSE", "NIL", "IF", "ELSE", "WHILE", 
                          "RETURN", "NEW", "PAR", "GROUP", "OPT", "CRITICAL", 
                          "SECTION", "REF", "AS", "TRY", "CATCH", "FINALLY", 
                          "IN", "STARTER_LXR", "ANNOTATION_RET", "ANNOTATION", 
                          "DOT", "ID", "INT", "FLOAT", "MONEY", "NUMBER_UNIT", 
                          "STRING", "CR", "COMMENT", "OTHER", "DIVIDER", 
                          "EVENT_PAYLOAD_LXR", "EVENT_END", "TITLE_CONTENT", 
                          "TITLE_END" ];
	static ruleNames = [ "WS", "COLOR_OR_EMOJI_MARKER", "COLOR_OR_EMOJI_VALUE", 
                      "HEX_DIGIT", "CONSTANT", "READONLY", "STATIC", "AWAIT", 
                      "TITLE", "COL", "SOPEN", "SCLOSE", "ARROW", "HEX", 
                      "COLOR", "OR", "AND", "EQ", "NEQ", "GT", "LT", "GTEQ", 
                      "LTEQ", "PLUS", "MINUS", "MULT", "DIV", "MOD", "POW", 
                      "NOT", "SCOL", "COMMA", "ASSIGN", "OPAR", "CPAR", 
                      "OBRACE", "CBRACE", "TRUE", "FALSE", "NIL", "IF", 
                      "ELSE", "WHILE", "RETURN", "NEW", "PAR", "GROUP", 
                      "OPT", "CRITICAL", "SECTION", "REF", "AS", "TRY", 
                      "CATCH", "FINALLY", "IN", "STARTER_LXR", "ANNOTATION_RET", 
                      "ANNOTATION", "DOT", "ID", "UNIT", "DIGIT", "INT", 
                      "FLOAT", "MONEY", "NUMBER_UNIT", "STRING", "CR", "COMMENT", 
                      "OTHER", "DIVIDER", "EVENT_PAYLOAD_LXR", "EVENT_END", 
                      "TITLE_CONTENT", "TITLE_END" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
    }

    get atn() {
        return atn;
    }
}

sequenceLexer.EOF = antlr4.Token.EOF;
sequenceLexer.WS = 1;
sequenceLexer.COLOR_OR_EMOJI_MARKER = 2;
sequenceLexer.CONSTANT = 3;
sequenceLexer.READONLY = 4;
sequenceLexer.STATIC = 5;
sequenceLexer.AWAIT = 6;
sequenceLexer.TITLE = 7;
sequenceLexer.COL = 8;
sequenceLexer.SOPEN = 9;
sequenceLexer.SCLOSE = 10;
sequenceLexer.ARROW = 11;
sequenceLexer.COLOR = 12;
sequenceLexer.OR = 13;
sequenceLexer.AND = 14;
sequenceLexer.EQ = 15;
sequenceLexer.NEQ = 16;
sequenceLexer.GT = 17;
sequenceLexer.LT = 18;
sequenceLexer.GTEQ = 19;
sequenceLexer.LTEQ = 20;
sequenceLexer.PLUS = 21;
sequenceLexer.MINUS = 22;
sequenceLexer.MULT = 23;
sequenceLexer.DIV = 24;
sequenceLexer.MOD = 25;
sequenceLexer.POW = 26;
sequenceLexer.NOT = 27;
sequenceLexer.SCOL = 28;
sequenceLexer.COMMA = 29;
sequenceLexer.ASSIGN = 30;
sequenceLexer.OPAR = 31;
sequenceLexer.CPAR = 32;
sequenceLexer.OBRACE = 33;
sequenceLexer.CBRACE = 34;
sequenceLexer.TRUE = 35;
sequenceLexer.FALSE = 36;
sequenceLexer.NIL = 37;
sequenceLexer.IF = 38;
sequenceLexer.ELSE = 39;
sequenceLexer.WHILE = 40;
sequenceLexer.RETURN = 41;
sequenceLexer.NEW = 42;
sequenceLexer.PAR = 43;
sequenceLexer.GROUP = 44;
sequenceLexer.OPT = 45;
sequenceLexer.CRITICAL = 46;
sequenceLexer.SECTION = 47;
sequenceLexer.REF = 48;
sequenceLexer.AS = 49;
sequenceLexer.TRY = 50;
sequenceLexer.CATCH = 51;
sequenceLexer.FINALLY = 52;
sequenceLexer.IN = 53;
sequenceLexer.STARTER_LXR = 54;
sequenceLexer.ANNOTATION_RET = 55;
sequenceLexer.ANNOTATION = 56;
sequenceLexer.DOT = 57;
sequenceLexer.ID = 58;
sequenceLexer.INT = 59;
sequenceLexer.FLOAT = 60;
sequenceLexer.MONEY = 61;
sequenceLexer.NUMBER_UNIT = 62;
sequenceLexer.STRING = 63;
sequenceLexer.CR = 64;
sequenceLexer.COMMENT = 65;
sequenceLexer.OTHER = 66;
sequenceLexer.DIVIDER = 67;
sequenceLexer.EVENT_PAYLOAD_LXR = 68;
sequenceLexer.EVENT_END = 69;
sequenceLexer.TITLE_CONTENT = 70;
sequenceLexer.TITLE_END = 71;

sequenceLexer.COMMENT_CHANNEL = 2;
sequenceLexer.MODIFIER_CHANNEL = 3;
sequenceLexer.INLINE_DECORATOR_CHANNEL = 4;

sequenceLexer.EVENT = 1;
sequenceLexer.TITLE_MODE = 2;


sequenceLexer.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch (ruleIndex) {
		case 71:
			return this.DIVIDER_sempred(localctx, predIndex);
    	default:
    		throw "No registered predicate for:" + ruleIndex;
    }
};

sequenceLexer.prototype.DIVIDER_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.column === 0;
		default:
			throw "No predicate with index:" + predIndex;
	}
};




